@page "/ViewTutors"
@attribute [Authorize]
@using HttpClients.ClientInterfaces
@using Domain.Model
@using Microsoft.AspNetCore.Authorization
@using Domain.DTOs
@inject IUserService userService
@inject NavigationManager navMgr

<h1> <span class="badge bg-secondary align-content-center">Tutor Dashboard</span></h1>
<div class="container-fluid mt-2 d-inline-flex">
    <select class="form-control" id="courses-dropdown" @bind="course" style="width: 200px">
        <option value="" selected disabled hidden>Select Course</option>
        <option value="DMA">DMA</option>
        <option value="SDJ1">SDJ1</option>
        <option value="SDJ2">SDJ2</option>
        <option value="SDJ3">SDJ3</option>
        <option value="DNP">DNP</option>
    </select>
    <form class="d-flex">
        <input class="form-control me-2" type="text" placeholder="Search">
        <button class="btn btn-primary" type="button">Search</button>
    </form>
</div>

@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (users == null)
{
    <span>Loading..</span>
}
else if (!users.Any())
{
    <span>No tutors to be found</span>
}
else
{
    <div class="users-container">
        @foreach (User user in users)
        {
            <div class="user-card" style="width:300px">
              <img class="card-img-top" src="icons/user.png" alt="Card image">
              <div class="card-body">
                  <h4 class="card-title">@user.UserName</h4>
                  <p class="card-text">@TruncateDescription(descriptions[user.UserName])</p>
              </div>
              <button class="viewProfilebtn" @onclick="(() => ViewProfileAsync(user.UserName))">View Profile</button>
            </div>
        }
    </div>
}

@code {

    string username = "username";
    private IEnumerable<User>? users;
    private string msg = "";
    private string course;
    private Dictionary<string, string> descriptions = new();

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
            users = users.Where(u => u.UserType.Equals("tutor", StringComparison.OrdinalIgnoreCase));

            await FetchDescriptionsAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task FetchDescriptionsAsync()
    {
        foreach (User user in users)
        {
            TutorInformationDto description = await GetTutorAsync(user.UserName);
            descriptions[user.UserName] = description.Description;
        }
    }

    private async Task<TutorInformationDto> GetTutorAsync(string UserName)
    {
        return await userService.GetTutorAsync(UserName);
    }
    
    private string TruncateDescription(string description)
    {
        const int maxLength = 50;
        if (description.Length <= maxLength)
        {
            return description;
        }
        else
        {
            return description.Substring(0, maxLength) + "...";
        }
    }

    private async Task ViewProfileAsync(string userName)
    {
        navMgr.NavigateTo($"/ViewProfile/{userName}");
    }
}