@page "/MessagePlatform"
@using HttpClients.ClientInterfaces
@using Domain.Model
@using System.Threading.Tasks
@using System.Timers
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService userService;
@inject IMessageService messageService;
@inject NavigationManager navMgr
<h1> <span class="badge bg-secondary align-content-center">Message Platform</span></h1>
@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (users == null)
{
    <span>Loading..</span>
}
else if (!users.Any())
{
    <span>No conversations to be found</span>
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <div class="list-group">
                @foreach (User user in users)
                {
                    <button class="btn btn-outline-primary" @onclick="Toggle">@user.UserName</button>
                }
            </div>
        </div>
        <div class="col-sm-8">
            <div hidden="@showPanel1"></div>
            <div hidden="@(showPanel1)">
                <div class="card" style="width:600px">
                    <div class="card-body">
                        <p class="card-text"></p>
                        <a href="#" class="btn btn-primary">Send Message</a>
                        <div>
                            <label for="comment">Write Message:</label>
                            <textarea class="form-control" rows="5" id="comment" name="text"@bind="msg">@msg</textarea>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
@code {
    bool showPanel1 = true;

    void Toggle()
    {
        showPanel1 = !showPanel1;
    }
    
    private IEnumerable<User>? users;
    string username = "username";
    private string msg;
    private int i = 0;
    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            msg = "Lol";
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            username = authState.User.Identity.Name;
            users = await userService.GetUsers();
            users = users.Where(u => u.UserType.Equals("tutor", StringComparison.OrdinalIgnoreCase));
            
            timer = new Timer(5000); // Refresh every 5 second
            timer.Elapsed += async (sender, e) => await loop();
            timer.AutoReset = true;
            timer.Start();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task loop()
    {
        i++;
        await messageService.Send("test" + i);
        msg = await messageService.Receive(username);
        StateHasChanged();
    }
}