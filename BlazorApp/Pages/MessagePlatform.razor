@page "/MessagePlatform/{userName}"
@page "/MessagePlatform"
@using HttpClients.ClientInterfaces
@using Domain.Model
@using System.Timers
@using Domain.DTOs
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService userService;
@inject IMessageService messageService;
@inject NavigationManager navMgr
@attribute [Authorize]


<h1> <span class="badge bg-secondary align-content-center">Message Platform</span></h1>
@if (users == null)
{
    <span>Loading..</span>
}
else if (!users.Any())
{
    <span>No conversations to be found</span>
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <form class="d-flex">
                <input class="form-control me-2 mb-5" type="text" @bind="userName" placeholder="Search for Tutors">
                <button class="btn btn-primary mb-5" type="button" @onclick="SearchTutorByUsername">Search</button>
            </form>
            
            <div class="list-group">
                @foreach (User user in users)
                {
                    if (!user.UserName.Equals(sender.UserName))
                    {
                        <button class="btn btn-outline-primary" @onclick="() => OpenChat(user)">@user.UserName</button>
                    }
                }
            </div>
        </div>
    <div class="col-sm-8">
        <div hidden="@chat">
            <div class="card" style="width:600px">
                <button class="btn btn-outline-danger" style="margin-left: 500px" @onclick="@CloseChat">Close</button>
                <div class="card-body">
                    <div class="list-group" style="height: 400px; overflow-y: auto;">
                        @if (messages.Count == 0)
                        {
                            <h3> <span class="badge bg-danger align-content-center">No conversation available</span></h3>
                        }
                        else
                        {
                            @foreach (MessageDto message in messages)
                            {
                                @if (message.Sender.UserName.Equals(sender.UserName))
                                {
                                    <ul class="message-right"> @message.Sender.UserName : @message.Message</ul>
                                }
                                else
                                {
                                    <ul class="message-left"> @message.Sender.UserName : @message.Message</ul>
                                }
                            }
                        }

                    </div>
                    <button class="btn btn-outline-primary" disabled="@(string.IsNullOrWhiteSpace(msg))" @onclick="() => SendMessage(receiver)">Send Message</button>
                    <div>
                        <label for="comment">Write Message:</label>
                        <textarea class="form-control" rows="2" id="comment" name="text"@bind="msg">@msg</textarea>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
@code {
    bool chat = true;
    
    [Parameter]
    public string userName { get; set;}
    
    List<MessageDto> messages;
    
    void OpenChat(User receiver)
    {
        if (chat)
        {
            chat = false;
        }
        this.receiver = receiver;
        messages = new();
        
        timer = new Timer(1000); // Refresh every 1 second
        timer.Elapsed += async (sender, e) => await ReceiveMessages();
        timer.AutoReset = true;
        timer.Start();
    }

    void CloseChat()
    {
        chat = true;
        timer.Stop();
    }

    private IEnumerable<User>? users;
    private IEnumerable<User>? searchedUsers;
    private IEnumerable<User>? tutors;
    private string msg = "";
    private int i = 0;
    private Timer timer;

    User sender;
    User receiver;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            msg = "";
            messages = new();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            IEnumerable<User> test = await userService.GetUsers();
            sender = test.First(u => u.UserName.Equals(authState.User.Identity.Name));
            
            tutors = await userService.GetUsers();
            tutors = tutors.Where(u => u.UserType.Equals("tutor", StringComparison.OrdinalIgnoreCase));
            users = tutors;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    

    public async Task ReceiveMessages()
    {
        MessageDto message = await messageService.Receive(sender.UserName);
        if (message != null)
        {
            if ((message.Sender.UserName.Equals(receiver.UserName)  || message.Receiver.UserName.Equals(receiver.UserName)) && (message.Receiver.UserName.Equals(sender.UserName) || message.Sender.UserName.Equals(sender.UserName)))
            {
                messages.Add(message);
            }
        }
        StateHasChanged();
    }

    private async Task SendMessage(User receiver)
    {
        MessageDto dto = new MessageDto(sender, receiver, msg);
        MessageDto sent = await messageService.Send(dto);
        messages.Add(sent);
        msg = "";
        StateHasChanged();
    }
    private async Task SearchTutorByUsername()
    {
        try
        {
            searchedUsers = new[] { await userService.SearchTutorByUsername(userName) };
            users = searchedUsers;
        }
        catch (Exception e)
        {
            users = tutors;
            Console.WriteLine(e);
            msg = e.Message;
        }
        
    }
}
}