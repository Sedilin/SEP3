@page "/MessagePlatform"
@using HttpClients.ClientInterfaces
@using Domain.Model
@inject IUserService userService
@inject NavigationManager navMgr


<h1> <span class="badge bg-secondary align-content-center">Message Platform</span></h1>


@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (users == null)
{
    <span>Loading..</span>
}
else if (!users.Any())
{
    <span>No conversations to be found</span>
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <div class="list-group">
                @foreach (User user in users)
                {
                    <button class="btn btn-outline-primary" @onclick="Toggle">@user.UserName</button>
                }
            </div>
        </div>
        <div class="col-sm-8">
            <div hidden="@showPanel2"></div>
            <div hidden="@(showPanel2)">
                <div class="card" style="width:600px">
                    <div class="card-body">
                        <p class="card-text">Use .card-title to add card titles to any heading element. 
                        The .card-text class is used to remove bottom margins for a element if it is the last child 
                            (or the only one) inside .card-body. 
                            The .card-link class adds a blue color to any link, and a hover effect.</p>
                        <a href="#" class="btn btn-primary">Send Message</a>
                        <div>
                            <label for="comment">Write Message:</label>
                            <textarea class="form-control" rows="5" id="comment" name="text"></textarea>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
@code {
    
    bool showPanel2 = true;
    void Toggle() { showPanel2 = !showPanel2; }
    
    private IEnumerable<User>? users;
    string username = "username";
    private string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
            users = users.Where(u => u.UserType.Equals("tutor", StringComparison.OrdinalIgnoreCase));
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
}