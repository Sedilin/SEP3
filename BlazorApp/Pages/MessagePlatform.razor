@page "/MessagePlatform"
@using HttpClients.ClientInterfaces
@using Domain.Model
@using System.Threading.Tasks
@using System.Timers
@using Domain.DTOs
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService userService;
@inject IMessageService messageService;
@inject NavigationManager navMgr


<h1> <span class="badge bg-secondary align-content-center">Message Platform</span></h1>
@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (users == null)
{
    <span>Loading..</span>
}
else if (!users.Any())
{
    <span>No conversations to be found</span>
}
else
{
    <div class="row">
        <div class="col-sm-4">
            <div class="list-group">
                @foreach (User user in users)
                {
                    <button class="btn btn-outline-primary" @onclick="() => Toggle(user)">@user.UserName</button>
                }
            </div>
        </div>
        <div class="col-sm-8">
            <div hidden="@showPanel1"></div>
            <div hidden="@(showPanel1)">
                <div class="card" style="width:600px">
                    <div class="card-body">
                        <div class="list-group" style="height: 200px; overflow-y: auto;">
                            @foreach (MessageDto message in messages)
                            {
                                @if (message.Sender.UserName.Equals(sender.UserName))
                                {
                                    <ul class="message-right"> @message.Sender.UserName : @message.Message</ul>
                                }
                                else
                                {
                                    <ul class="message-left"> @message.Sender.UserName : @message.Message</ul>
                                }
                            }
                            </div>
                        <button class="btn btn-outline-danger">Close</button>
                        <button class="btn btn-outline-danger" @onclick="() => send(receiver)">Send Message</button>
                        <div>
                            <label for="comment">Write Message:</label>
                            <textarea class="form-control" rows="5" id="comment" name="text"@bind="msg">@msg</textarea>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
@code {
    bool showPanel1 = true;

    List<MessageDto> messages = new();
    
    void Toggle(User receiver)
    {
        showPanel1 = !showPanel1;
        this.receiver = receiver;
        
        if (!showPanel1)
        {
            timer = new Timer(1000); // Refresh every 1 second
            timer.Elapsed += async (sender, e) => await loop();
            timer.AutoReset = true;
            timer.Start();
        }
        else
        {
            timer.Stop();
        }
    }
    
    private IEnumerable<User>? users;
    private string msg;
    private int i = 0;
    private Timer timer;

    User sender;
    User receiver;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            msg = "Lol";
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            IEnumerable<User> test = await userService.GetUsers();
            sender = test.First(u => u.UserName.Equals(authState.User.Identity.Name));
            
            users = await userService.GetUsers();
            users = users.Where(u => u.UserType.Equals("tutor", StringComparison.OrdinalIgnoreCase));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    public async Task loop()
    {
        MessageDto message = await messageService.Receive(sender.UserName);
        if (message != null)
        {
            messages.Add(message);
        }
        StateHasChanged();
    }

    private async Task send(User receiver)
    {
        i++;
        MessageDto dto = new MessageDto(sender, receiver, msg);
        MessageDto sent = await messageService.Send(dto);
        messages.Add(sent);
        StateHasChanged();
    }
}