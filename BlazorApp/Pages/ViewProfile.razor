@page "/ViewProfile/{username}"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Runtime.CompilerServices
@inject IUserService userService
@inject NavigationManager navMgr
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]

@if (_tutor == null)
{
    <span>Loading..</span>
}

else
{
    <div class="users-container">
        <div class="user-card" style="width:600px">
            <h4 class="card-title">@Username</h4>

            <div class="card-body">
                <h4 class="card-body">Courses</h4>
                @foreach (string course in _tutor.Courses)
                {
                    <p>@course</p>
                }
                <h4 class="card-body">Rating</h4>
                <h4 class="card-body">Description</h4>
                <p class="card-body" style="border: solid; border-width: thick; border-color: #0b5ed7; height: 100px; overflow-y: auto;"> @_tutor.Description</p>
            </div>
            <button class="btn btn-outline-primary" disabled="@(_loggedUserName.Equals(Username))" @onclick="(() => MessageAsync(Username))">Message</button>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Username { get; set; }

    private TutorInformationDto? _tutor;
    private string? _loggedUserName = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            _loggedUserName = authState.User.Identity?.Name;

            _tutor = await userService.GetTutorAsync(Username);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task MessageAsync(string userName)
    {
        navMgr.NavigateTo($"/MessagePlatform/{userName}");
    }

}